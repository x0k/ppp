#!/usr/bin/env bash

set -xe

d:
  pnpm run dev

c:
  pnpm run check

b:
  pnpm run build

p:
  pnpm run preview

libs/:
  pushd packages/libs
  b:
    pnpm run build
  popd

js/:
  pushd packages/testing-javascript
  b:
    pnpm run build
  popd

ts/:
  pushd packages/testing-typescript
  b:
    pnpm run build
  popd

php/:
  pushd packages/testing-php
  b:
    pnpm run build
  popd

go/:
  pushd packages/testing-go
  p:
    bun run probe/index.ts
  b:
    pnpm run build
  popd

rust/:
  pushd packages/testing-rust
  p:
    bun run probe/index.ts
  b:
    pnpm run build
  popd

gleam/:
  pushd packages/testing-gleam
  p:
    bun run probe/index.ts
  b:
    pnpm run build
  popd

# Artifacts
a/:
  build: */build
  pushd packages
  go/:
    pushd testing-go/go
    build:
      GOOS=js GOARCH=wasm go build -o ../public/compiler.wasm cmd/compiler/main.go
    probe:
      go run cmd/probe/main.go
    tidy:
      go mod tidy
    popd
  rust/:
    build: wasm/*
    pushd testing-rust/rust
    wasm/:
      sdk:
        if [ ! -f wasi-sdk-20.0-linux.tar.gz ]; then
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-20/wasi-sdk-20.0-linux.tar.gz
          tar -xzvf wasi-sdk-20.0-linux.tar.gz
        fi
      build:
        ./x.py install
      copy:
        cp dist/bin/miri.wasm ../public
        cp -r dist/lib/rustlib/x86_64-unknown-linux-gnu/lib/* ../public/lib/
      clean:
        rm -rf wasi-sdk-20.0* build dist
    popd
  gleam/:
    build: compiler/* stdlib/*
    pushd testing-gleam
    compiler/:
      pushd gleam/compiler-wasm
      build:
       CC=clang CXX=clang++ wasm-pack build --release --target web
      copy:
        mkdir -p ../../src/vendor/compiler
        cp -r pkg/* ../../src/vendor/compiler/
      # Remove link to wasm file to prevent
      # Asset embedding by Vite
      refine:
        sed -i '/async function __wbg_init/,/^}/{
            /^async function __wbg_init/!{
                /^}/!d
            }
        }' ../../src/vendor/compiler/gleam_wasm.js
      clean:
        rm -rf ../target pkg
      popd
    stdlib/:
      pushd gleamstd
      build:
        gleam run
      copy:
        mkdir -p ../src/vendor/stdlib
        cp -r dist/* ../src/vendor/stdlib/
      clean:
        rm -rf dist build
      popd
    popd
  dotnet/:
    build: runtime/*
    pushd testing-dotnet
    runtime/:
      image:
        docker build -q . > .runtime_docker_image_id
      build:
        docker run --user $(id -u):$(id -g) -it --rm \
          -v ./runtime:/opt/runtime -w /opt/runtime \
          $(cat .runtime_docker_image_id) /build-runtime.sh
      # clean:
      #   make -C runtime/src/mono/wasm clean clean-emsdk
      #   docker rmi $(cat .runtime_docker_image_id)
      #   TODO: rm -rf ./runtime/.dotnet ./runtime/artifacts
      #   TODO: git restore 
    popd
